package com.mit.entity;

// Generated 20 avr. 2016 13:30:11 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Tache generated by hbm2java
 */
@Entity
@Table(name = "tache", catalog = "mitdb")
public class Tache implements java.io.Serializable {

	private TacheId id;
	private Tache tache;
	private Projet projet;
	private String nomTache;
	private String descTache;
	private Boolean etatTache;
	private Date dateD;
	private Date dateF;
	private Set<Tache> taches = new HashSet<Tache>(0);
	private Set<Contrattache> contrattaches = new HashSet<Contrattache>(0);
	private Set<Attestation> attestations = new HashSet<Attestation>(0);

	public Tache() {
	}

	public Tache(TacheId id, Projet projet) {
		this.id = id;
		this.projet = projet;
	}

	public Tache(TacheId id, Tache tache, Projet projet, String nomTache,
			String descTache, Boolean etatTache, Date dateD, Date dateF,
			Set<Tache> taches, Set<Contrattache> contrattaches,
			Set<Attestation> attestations) {
		this.id = id;
		this.tache = tache;
		this.projet = projet;
		this.nomTache = nomTache;
		this.descTache = descTache;
		this.etatTache = etatTache;
		this.dateD = dateD;
		this.dateF = dateF;
		this.taches = taches;
		this.contrattaches = contrattaches;
		this.attestations = attestations;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "idProjet", column = @Column(name = "idProjet", nullable = false)),
			@AttributeOverride(name = "idTache", column = @Column(name = "idTache", nullable = false)) })
	public TacheId getId() {
		return this.id;
	}

	public void setId(TacheId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "Tac_idProjet", referencedColumnName = "idProjet"),
			@JoinColumn(name = "Tac_idTache", referencedColumnName = "idTache") })
	public Tache getTache() {
		return this.tache;
	}

	public void setTache(Tache tache) {
		this.tache = tache;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idProjet", nullable = false, insertable = false, updatable = false)
	public Projet getProjet() {
		return this.projet;
	}

	public void setProjet(Projet projet) {
		this.projet = projet;
	}

	@Column(name = "nomTache", length = 254)
	public String getNomTache() {
		return this.nomTache;
	}

	public void setNomTache(String nomTache) {
		this.nomTache = nomTache;
	}

	@Column(name = "descTache", length = 254)
	public String getDescTache() {
		return this.descTache;
	}

	public void setDescTache(String descTache) {
		this.descTache = descTache;
	}

	@Column(name = "etatTache")
	public Boolean getEtatTache() {
		return this.etatTache;
	}

	public void setEtatTache(Boolean etatTache) {
		this.etatTache = etatTache;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "dateD", length = 0)
	public Date getDateD() {
		return this.dateD;
	}

	public void setDateD(Date dateD) {
		this.dateD = dateD;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "dateF", length = 0)
	public Date getDateF() {
		return this.dateF;
	}

	public void setDateF(Date dateF) {
		this.dateF = dateF;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tache")
	public Set<Tache> getTaches() {
		return this.taches;
	}

	public void setTaches(Set<Tache> taches) {
		this.taches = taches;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tache")
	public Set<Contrattache> getContrattaches() {
		return this.contrattaches;
	}

	public void setContrattaches(Set<Contrattache> contrattaches) {
		this.contrattaches = contrattaches;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tache")
	public Set<Attestation> getAttestations() {
		return this.attestations;
	}

	public void setAttestations(Set<Attestation> attestations) {
		this.attestations = attestations;
	}

}
